#pragma once
#ifndef METHOD_REFERENCE_H
#define METHOD_REFERENCE_H

#include <string>

namespace Binding {
    class BoundBlockStatementNode;
    class BoundFunctionDefinitionNode;
}

namespace Symbols {
    class FunctionSymbol;
    class VariableSymbol;
}

namespace CodeGen {

class MethodReference {
private:
    Symbols::FunctionSymbol* m_method;
    std::string m_owner;
    bool m_is_static;
    bool m_is_synthesized;
    Binding::BoundBlockStatementNode* m_body;
    MethodReference(Symbols::FunctionSymbol* method, std::string owner, bool is_static, bool is_synthesized, Binding::BoundBlockStatementNode* body = nullptr);
public:
    static MethodReference* resolve_method(Symbols::FunctionSymbol* method, std::string owner, bool is_static, bool is_synthesized = false);
    static MethodReference* resolve_and_define_method(Binding::BoundFunctionDefinitionNode* method, std::string owner, bool is_static, bool is_synthesized = false);

    /**
     * @brief Makes a copy of the current Method Reference with 
     * the passed in body statements.
     * Assumes synthesized by the compiler.
     * 
     * @param body Body statments in Bound BLock.
     * @param is_synthesized Whether this was generated by the compiler (default true).
     */
    MethodReference* define_method(Binding::BoundBlockStatementNode* body, bool is_synthesized = true);

    /**
     * @brief The function symbol of the referenced method.
     */
    Symbols::FunctionSymbol* method() const;

    /**
     * @brief The "class" that owns this method. 
     */
    std::string owner() const;

    /**
     * @brief Whether this is a static method (in our context, this means user defined)
     * or if it is an initializer method for a struct or our main asm file. 
     */
    bool is_static() const;

    /**
     * @brief Whether or not this method was generated by the compiler. 
     */
    bool is_synthesized() const;

    /**
     * @brief Whether this method has a defined function body.
     * Not all will need to, for example the libc methods. 
     */
    bool is_defined() const;

    /**
     * @brief The method body.
     */
    Binding::BoundBlockStatementNode* body() const;
};

}

#endif