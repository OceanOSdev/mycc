%skeleton "lalr1.cc" /* -*- C++ -*- */
%defines

%define api.token.constructor
%define api.value.type variant
%define parse.assert
%require "3.2"
%code requires
{
    #include <iostream>
    #include <string>
    #include <vector>
    #include <stdint.h>
    #include "syntax_token.h"
//     #include "syntax/formal_parameter_node.h"
//     #include "syntax/operator_tokens.h"
//     #include "syntax/expression_node.h"
//     #include "syntax/cast_expression_node.h"
//     #include "syntax/ternary_expression_node.h"
//     #include "syntax/binary_expression_node.h"
//     #include "syntax/unary_expression_node.h"
//     #include "syntax/call_expression_node.h"
//     #include "syntax/name_expression_node.h"
//     #include "syntax/index_expression_node.h"
//     #include "syntax/member_expression_node.h"
//     #include "syntax/assignment_expression_node.h"
//     #include "syntax/decrement_expression_node.h"
//     #include "syntax/increment_expression_node.h"
//     #include "syntax/partial_variable_declaration_node.h"
//     #include "syntax/variable_group_declaration_node.h"
//     #include "syntax/literal_val_expression_node.h"
//     #include "syntax/statement_node.h"
//     #include "syntax/expression_statement_node.h"
//     #include "syntax/continue_statement_node.h"
//     #include "syntax/break_statement_node.h"
//     #include "syntax/return_statement_node.h"
//     #include "syntax/if_statement_node.h"
//     #include "syntax/block_statement_node.h"
//     #include "syntax/for_statement_node.h"
//     #include "syntax/while_statement_node.h"
//     #include "syntax/do_while_statement_node.h"
//     #include "syntax/struct_declaration_node.h"
//     #include "syntax/function_declaration_node.h"
//     #include "syntax/function_prototype_node.h"
//     #include "syntax/function_definition_node.h"
//     #include "syntax/global_declaration_node.h"
//     #include "syntax/local_declaration_node.h"
//     #include "syntax/global_struct_declaration_node.h"
//     #include "syntax/global_variable_group_declaration_node.h"
//     #include "syntax/translation_unit_node.h"



    //namespace Syntax { class BinaryExpressionNode; }
    
     class Lexer;
     class Driver;

     void set_driver_translation_unit(Syntax::TranslationUnitNode* node);
     //void print_formal_param_list(std::vector<Syntax::ParameterSymbol> list);
}


%code top
{
    #include <iostream>
    #include <stdio.h>
    #include <string.h>
    #include "lexer.h"
    #include "mycc.tab.hpp"
    #include "driver.h"
    #include "location.hh"

    
    
    // yylex() arguments are defined in parser.y
    static yy::parser::symbol_type yylex(Lexer &lexer, Driver &driver) {
        return lexer.get_next_token();
    }
    
    // you can accomplish the same thing by inlining the code using preprocessor
    // x and y are same as in above static function
    // #define yylex(x, y) lexer.get_next_token()
    
}

%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.curr_file;
};

%lex-param { Lexer &lexer }
%lex-param { Driver &driver }
%parse-param { Lexer &lexer }
%parse-param { Driver &driver }
%locations

%token END 0
%token <std::string> IDENT
%token <std::string> TYPE
%token CONST STRUCT 
%token <int> INTCONST 
%token <float> REALCONST 
%token <std::string> STRCONST 
%token <char> CHARCONST
%token FOR WHILE DO IF ELSE BREAK CONTINUE RETURN

%token LPAR RPAR LBRACKET RBRACKET LBRACE RBRACE
%token DOT COMMA SEMI QUEST COLON

%token <Syntax::SyntaxTokenType> PLUS
%token <Syntax::SyntaxTokenType> MINUS
%token <Syntax::SyntaxTokenType> STAR
%token <Syntax::SyntaxTokenType> SLASH
%token <Syntax::SyntaxTokenType> MOD
%token <Syntax::SyntaxTokenType> TILDE
%token <Syntax::SyntaxTokenType> PIPE
%token <Syntax::SyntaxTokenType> AMP
%token <Syntax::SyntaxTokenType> BANG
%token <Syntax::SyntaxTokenType> DPIPE
%token <Syntax::SyntaxTokenType> DAMP

%token <Syntax::SyntaxTokenType> ASSIGN
%token <Syntax::SyntaxTokenType> PLUSASSIGN
%token <Syntax::SyntaxTokenType> MINUSASSIGN
%token <Syntax::SyntaxTokenType> STARASSIGN
%token <Syntax::SyntaxTokenType> SLASHASSIGN
%token <Syntax::SyntaxTokenType> INCR
%token <Syntax::SyntaxTokenType> DECR

%token <Syntax::SyntaxTokenType> EQUALS
%token <Syntax::SyntaxTokenType> NEQUAL
%token <Syntax::SyntaxTokenType> GT
%token <Syntax::SyntaxTokenType> GE
%token <Syntax::SyntaxTokenType> LT
%token <Syntax::SyntaxTokenType> LE

%type <Syntax::FormalParameterNode*> formal_param
%type <std::vector<Syntax::FormalParameterNode*>> formal_param_list
%type <Syntax::ExpressionNode*> expr
%type <Syntax::BinaryExpressionNode*> bin_expr
%type <Syntax::UnaryExpressionNode*> un_expr
%type <std::vector<Syntax::ExpressionNode*>> nonzero_expr_list
%type <std::vector<Syntax::ExpressionNode*>> expr_list
%type <Syntax::ExpressionNode*> l_val
%type <Syntax::SyntaxTokenType> assign_op
%type <Syntax::PartialVariableDeclarationNode*> ident_ca
%type <std::vector<Syntax::PartialVariableDeclarationNode*>> ident_list
%type <std::vector<Syntax::PartialVariableDeclarationNode*>> ident_list_na
%type <Syntax::VariableGroupDeclarationNode*> var_decl
%type <Syntax::VariableGroupDeclarationNode*> st_var_decl_na
%type <Syntax::LiteralValExpressionNode*> literal_val
%type <Syntax::ExpressionNode*> opt_expr

%type <Syntax::StatementNode*> stmt
%type <Syntax::StatementNode*> stmts
%type <Syntax::BlockStatementNode*> stmt_block
%type <std::vector<Syntax::StatementNode*>> stmt_list
%type <std::vector<Syntax::StatementNode*>> nonzero_stmt_list

%type <Syntax::PartialVariableDeclarationNode*> ident_c

%type <std::vector<Syntax::VariableGroupDeclarationNode*>> nonzero_st_var_decl_list_na
%type <std::vector<Syntax::VariableGroupDeclarationNode*>> st_var_decl_list_na

%type <Syntax::LocalDeclarationNode*> l_declar
%type <std::vector<Syntax::LocalDeclarationNode*>> var_struct_decl_list
%type <std::vector<Syntax::LocalDeclarationNode*>> nonzero_var_struct_decl_list

%type <Syntax::StructDeclarationNode*> struct_def
%type <Syntax::FunctionDeclarationNode*> func_decl
%type <Syntax::FunctionPrototypeNode*> func_proto
%type <Syntax::FunctionDefinitionNode*> func_def

%type <Syntax::GlobalVariableGroupDeclarationNode*> glob_var_decl
%type <Syntax::GlobalStructDeclarationNode*> glob_struct_def

%type <Syntax::GlobalDeclarationNode*> glob_decl
%type <std::vector<Syntax::GlobalDeclarationNode*>> glob_decl_list

//%type <Syntax::TranslationUnitNode*> translation_unit

%nonassoc WITHOUT_ELSE
%nonassoc ELSE

%left COMMA
%left DOT
%right ASSIGN PLUSASSIGN MINUSASSIGN STARASSIGN SLASHASSIGN
%right QUEST COLON
%left DPIPE
%left DAMP
%left PIPE
%left AMP
%left EQUALS NEQUAL
%left LT LE GT GE
%left PLUS MINUS
%left STAR SLASH MOD
%right BANG TILDE UMINUS DECR INCR TYPE
%left LPAR RPAR LBRACKET RBRACKET

%%

translation_unit :                              { std::vector<Syntax::GlobalDeclarationNode*> g; driver.m_translation_unit = new Syntax::TranslationUnitNode(g); }
                 | glob_decl_list               { driver.m_translation_unit = new Syntax::TranslationUnitNode($1); }
                 ;

glob_decl_list : glob_decl                      { Syntax::GlobalDeclarationNode* p = $1; $$ = std::vector<Syntax::GlobalDeclarationNode*>(); $$.push_back(p); }
               | glob_decl_list glob_decl       { Syntax::GlobalDeclarationNode* p = $2; std::vector<Syntax::GlobalDeclarationNode*> &args = $1; args.push_back(p); $$ = args;}
               ;

glob_decl : glob_var_decl       { $$ = $1; }                                      
          | glob_struct_def     { $$ = $1; }                            
          | func_proto          { $$ = $1; }                                
          | func_def            { $$ = $1; }                                  
          ;

glob_var_decl : var_decl                                             { $$ = new Syntax::GlobalVariableGroupDeclarationNode($1); }
              ;

glob_struct_def : struct_def                                         { $$ = new Syntax::GlobalStructDeclarationNode($1); }
                ;

func_proto : func_decl SEMI                                           { $$ = new Syntax::FunctionPrototypeNode($1); }
           ;

func_decl : TYPE IDENT LPAR formal_param_list RPAR                    { $$ = new Syntax::FunctionDeclarationNode($1, $2, $4); }
          | TYPE IDENT LPAR RPAR                                      { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($1, $2, fps); }
          | CONST TYPE IDENT LPAR formal_param_list RPAR              { $$ = new Syntax::FunctionDeclarationNode($2, $3, $5, false, true); }
          | CONST TYPE IDENT LPAR RPAR                                { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($2, $3, fps, false, true); }
          | TYPE CONST IDENT LPAR formal_param_list RPAR              { $$ = new Syntax::FunctionDeclarationNode($1, $3, $5, false, true); }
          | TYPE CONST IDENT LPAR RPAR                                { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($1, $3, fps, false, true); }
          | STRUCT IDENT IDENT LPAR formal_param_list RPAR            { $$ = new Syntax::FunctionDeclarationNode($2, $3, $5, true); }
          | STRUCT IDENT IDENT LPAR RPAR                              { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($2, $3, fps, true); }
          | CONST STRUCT IDENT IDENT LPAR formal_param_list RPAR      { $$ = new Syntax::FunctionDeclarationNode($3, $4, $6, true, true); }
          | CONST STRUCT IDENT IDENT LPAR RPAR                        { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($3, $4, fps, true, true); }
          | STRUCT IDENT CONST IDENT LPAR formal_param_list RPAR      { $$ = new Syntax::FunctionDeclarationNode($2, $4, $6, true, true); }
          | STRUCT IDENT CONST IDENT LPAR RPAR                        { std::vector<Syntax::FormalParameterNode*> fps; $$ = new Syntax::FunctionDeclarationNode($2, $4, fps, true, true); }
          ;

formal_param_list : formal_param                                      { Syntax::FormalParameterNode* p = $1; $$ = std::vector<Syntax::FormalParameterNode*>(); $$.push_back(p); }
                  | formal_param_list COMMA formal_param              { Syntax::FormalParameterNode* p = $3; std::vector<Syntax::FormalParameterNode*> &args = $1; args.push_back(p); $$ = args;}
                  ;

formal_param : TYPE IDENT                                             {$$ = new Syntax::FormalParameterNode($1, $2);}
             | TYPE IDENT LBRACKET RBRACKET                           {$$ = new Syntax::FormalParameterNode($1, $2, false, false, true);}
             | CONST TYPE IDENT                                       {$$ = new Syntax::FormalParameterNode($2, $3, false, true, false);}
             | CONST TYPE IDENT LBRACKET RBRACKET                     {$$ = new Syntax::FormalParameterNode($2, $3, false, true, true);}
             | TYPE CONST IDENT                                       {$$ = new Syntax::FormalParameterNode($1, $3, false, true, false);}
             | TYPE CONST IDENT LBRACKET RBRACKET                     {$$ = new Syntax::FormalParameterNode($1, $3, false, true, true);}
             | STRUCT IDENT IDENT                                     {$$ = new Syntax::FormalParameterNode($2, $3, true);}
             | STRUCT IDENT IDENT LBRACKET RBRACKET                   {$$ = new Syntax::FormalParameterNode($2, $3, true, false, true);}
             | CONST STRUCT IDENT IDENT                               {$$ = new Syntax::FormalParameterNode($3, $4, true, true);}
             | CONST STRUCT IDENT IDENT LBRACKET RBRACKET             {$$ = new Syntax::FormalParameterNode($3, $4, true, true, true);}
             | STRUCT IDENT CONST IDENT                               {$$ = new Syntax::FormalParameterNode($2, $4, true, true);}
             | STRUCT IDENT CONST IDENT LBRACKET RBRACKET             {$$ = new Syntax::FormalParameterNode($2, $4, true, true, true);}
             ;

func_def : func_decl LBRACE var_struct_decl_list stmt_list RBRACE      { $$ = new Syntax::FunctionDefinitionNode($1, $3, $4); }        
         ;

struct_def : STRUCT IDENT LBRACE st_var_decl_list_na RBRACE SEMI      {$$ = new Syntax::StructDeclarationNode($2, $4);}
           ;

stmts : stmt                                                           { $$ = $1; }
      | stmt_block                                                     { $$ = $1; }
      ;

stmt_block : LBRACE stmt_list RBRACE                                   { $$ = new Syntax::BlockStatementNode($2); }
           ;

var_struct_decl_list :                                                      { std::vector<Syntax::LocalDeclarationNode*> l; $$ = l; }
                     | nonzero_var_struct_decl_list                         { $$ = $1; }
                     ;

nonzero_var_struct_decl_list : l_declar                                     { Syntax::LocalDeclarationNode* e = $1; $$ = std::vector<Syntax::LocalDeclarationNode*>(); $$.push_back(e); }
                             | nonzero_var_struct_decl_list l_declar        { Syntax::LocalDeclarationNode* e = $2; std::vector<Syntax::LocalDeclarationNode*> &args = $1; args.push_back(e); $$ = args; }          
                             ;

l_declar : var_decl                                                         { $$ = $1; }
         | struct_def                                                       { $$ = $1; }
         ;

st_var_decl_list_na :                                                       { std::vector<Syntax::VariableGroupDeclarationNode*> l; $$ = l; }
                    | nonzero_st_var_decl_list_na                           { $$ = $1; }
                    ;

nonzero_st_var_decl_list_na : st_var_decl_na                                { Syntax::VariableGroupDeclarationNode* e = $1; $$ = std::vector<Syntax::VariableGroupDeclarationNode*>(); $$.push_back(e); }
                            | nonzero_st_var_decl_list_na st_var_decl_na    { Syntax::VariableGroupDeclarationNode* e = $2; std::vector<Syntax::VariableGroupDeclarationNode*> &args = $1; args.push_back(e); $$ = args; }    
                            ;

st_var_decl_na : TYPE ident_list_na SEMI                                { $$ = new Syntax::VariableGroupDeclarationNode($1, $2, false, false); }                                 
               | CONST TYPE ident_list_na SEMI                          { $$ = new Syntax::VariableGroupDeclarationNode($2, $3, true, false); }
               | TYPE CONST ident_list_na SEMI                          { $$ = new Syntax::VariableGroupDeclarationNode($1, $3, true, false); }
               | STRUCT IDENT ident_list_na SEMI                        { $$ = new Syntax::VariableGroupDeclarationNode($2, $3, false, true); }
               | CONST STRUCT IDENT ident_list_na SEMI                  { $$ = new Syntax::VariableGroupDeclarationNode($3, $4, true, true); }
               | STRUCT IDENT CONST ident_list_na SEMI                  { $$ = new Syntax::VariableGroupDeclarationNode($2, $4, true, true); }
               ; 

ident_list_na : ident_c                                                 { Syntax::PartialVariableDeclarationNode* e = $1; $$ = std::vector<Syntax::PartialVariableDeclarationNode*>(); $$.push_back(e); }
              | ident_list_na COMMA ident_c                             { Syntax::PartialVariableDeclarationNode* e = $3; std::vector<Syntax::PartialVariableDeclarationNode*> &args = $1; args.push_back(e); $$ = args; }    
              ;

ident_c : IDENT                                                         { $$ = new Syntax::PartialVariableDeclarationNode($1); }
        | IDENT LBRACKET INTCONST RBRACKET                              { $$ = new Syntax::PartialVariableDeclarationNode($1, false, true, $3); }
        ;

stmt_list :                                                             { std::vector<Syntax::StatementNode*> l; $$ = l; }
          | nonzero_stmt_list                                           { $$ = $1; }
          ;

nonzero_stmt_list : stmt                                                { Syntax::StatementNode* e = $1; $$ = std::vector<Syntax::StatementNode*>(); $$.push_back(e); }
                  | nonzero_stmt_list stmt                              { Syntax::StatementNode* e = $2; std::vector<Syntax::StatementNode*> &args = $1; args.push_back(e); $$ = args; }
                  ;

stmt : DO stmts WHILE LPAR expr RPAR SEMI                               { $$ = new Syntax::DoWhileStatementNode($2, $5); }
     | WHILE LPAR expr RPAR stmts                                       { $$ = new Syntax::WhileStatementNode($3, $5); }
     | FOR LPAR opt_expr SEMI opt_expr SEMI opt_expr RPAR stmts         { $$ = new Syntax::ForStatementNode($3, $5, $7, $9); }
     | IF LPAR expr RPAR stmts %prec WITHOUT_ELSE                       { $$ = new Syntax::IfStatementNode($3, $5, nullptr); }
     | IF LPAR expr RPAR stmts ELSE stmts                               { $$ = new Syntax::IfStatementNode($3, $5, $7); }
     | RETURN opt_expr SEMI                                             { $$ = new Syntax::ReturnStatementNode($2); }
     | BREAK SEMI                                                       { $$ = new Syntax::BreakStatementNode(); }
     | CONTINUE SEMI                                                    { $$ = new Syntax::ContinueStatementNode(); }
     | expr SEMI                                                        { $$ = new Syntax::ExpressionStatementNode($1); }
     | SEMI                                                             { $$ = new Syntax::StatementNode(); }
     ;

opt_expr :                                                              { $$ = nullptr; }
         | expr                                                         { $$ = $1; }
         ;

expr_list :                                                             { std::vector<Syntax::ExpressionNode*> l; $$ = l; }
          | nonzero_expr_list                                           { $$ = $1; }
          ;

nonzero_expr_list : expr                                                { Syntax::ExpressionNode* e = $1; $$ = std::vector<Syntax::ExpressionNode*>(); $$.push_back(e); }
                  | nonzero_expr_list COMMA expr                        { Syntax::ExpressionNode* e = $3; std::vector<Syntax::ExpressionNode*> &args = $1; args.push_back(e); $$ = args; }
                  ;

expr : LPAR expr RPAR                                                   { $$ = $2; }
     | LPAR TYPE RPAR expr                                              { $$ = new Syntax::CastExpressionNode($2, $4); }
     | expr QUEST expr COLON expr                                       { $$ = new Syntax::TernaryExpressionNode($1, $3, $5); }
     | bin_expr                                                         { $$ = $1; }
     | un_expr                                                          { $$ = $1; }
     | INCR l_val                                                       { $$ = new Syntax::IncrementExpressionNode($2, false); }
     | DECR l_val                                                       { $$ = new Syntax::DecrementExpressionNode($2, false); }
     | l_val INCR                                                       { $$ = new Syntax::IncrementExpressionNode($1, true); }
     | l_val DECR                                                       { $$ = new Syntax::DecrementExpressionNode($1, true); }
     | l_val assign_op expr %prec ASSIGN                                { $$ = new Syntax::AssignmentExpressionNode($1, $2, $3); }
     | l_val                                                            { $$ = $1; }
     | IDENT LPAR expr_list RPAR                                        { $$ = new Syntax::CallExpressionNode($1, $3); }
     | literal_val                                                      { $$ = $1; }
     ;

l_val : IDENT                                                           { $$ = new Syntax::NameExpressionNode($1); }
      | IDENT LBRACKET expr RBRACKET                                    { $$ = new Syntax::IndexExpressionNode($1, $3); }
      | l_val DOT l_val                                                 { $$ = new Syntax::MemberExpressionNode($1, $3); }
      ;

un_expr : MINUS expr %prec UMINUS                                       { $$ = new Syntax::UnaryExpressionNode($1, $2); }
        | BANG expr                                                     { $$ = new Syntax::UnaryExpressionNode($1, $2); }
        | TILDE expr                                                    { $$ = new Syntax::UnaryExpressionNode($1, $2); }
        ;

bin_expr : expr DPIPE expr                                              { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr DAMP expr                                               { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr PIPE expr                                               { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr AMP expr                                                { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr EQUALS expr                                             { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr NEQUAL expr                                             { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr GT expr                                                 { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr GE expr                                                 { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr LT expr                                                 { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr LE expr                                                 { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr PLUS expr                                               { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr MINUS expr                                              { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr STAR expr                                               { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr SLASH expr                                              { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         | expr MOD expr                                                { $$ = new Syntax::BinaryExpressionNode($1, $2, $3); }
         ;

assign_op : ASSIGN                                                      { $$ = $1; }
          | PLUSASSIGN                                                  { $$ = $1; }
          | MINUSASSIGN                                                 { $$ = $1; }
          | STARASSIGN                                                  { $$ = $1; }
          | SLASHASSIGN                                                 { $$ = $1; }
          ;

literal_val : INTCONST   {int val = $1; Syntax::LiteralValWrapper w; w.i_val = val; $$ = new Syntax::LiteralValExpressionNode(Syntax::LiteralValType::INTCONST, w); /*std::cout << "INTCONST: " << val << std::endl;*/}
            | REALCONST  {float val = $1; Syntax::LiteralValWrapper w; w.f_val = val; $$ = new Syntax::LiteralValExpressionNode(Syntax::LiteralValType::REALCONST, w); /*std::cout << "REALCONST: " << val << std::endl;*/}
            | STRCONST   {std::string &val = $1; Syntax::LiteralValWrapper w; w.s_val = val; $$ = new Syntax::LiteralValExpressionNode(Syntax::LiteralValType::STRCONST, w); /*TODO: trim quotation marks std::cout << "STRCONST: " << val << std::endl;*/}
            | CHARCONST  {char val = $1; Syntax::LiteralValWrapper w; w.c_val = val; $$ = new Syntax::LiteralValExpressionNode(Syntax::LiteralValType::CHARCONST, w); /*std::cout << "CHARCONST: " << val << std::endl;*/}
            ;

var_decl : TYPE ident_list SEMI                                       { $$ = new Syntax::VariableGroupDeclarationNode($1, $2, false, false); }                                 
         | CONST TYPE ident_list SEMI                                 { $$ = new Syntax::VariableGroupDeclarationNode($2, $3, true, false); }
         | TYPE CONST ident_list SEMI                                 { $$ = new Syntax::VariableGroupDeclarationNode($1, $3, true, false); }
         | STRUCT IDENT ident_list SEMI                               { $$ = new Syntax::VariableGroupDeclarationNode($2, $3, false, true); }
         | CONST STRUCT IDENT ident_list SEMI                         { $$ = new Syntax::VariableGroupDeclarationNode($3, $4, true, true); }
         | STRUCT IDENT CONST ident_list SEMI                         { $$ = new Syntax::VariableGroupDeclarationNode($2, $4, true, true); }
         ; 

ident_list : ident_ca                                                 { Syntax::PartialVariableDeclarationNode* e = $1; $$ = std::vector<Syntax::PartialVariableDeclarationNode*>(); $$.push_back(e);}
           | ident_list COMMA ident_ca                                { Syntax::PartialVariableDeclarationNode* e = $3; std::vector<Syntax::PartialVariableDeclarationNode*> &args = $1; args.push_back(e); $$ = args;}
           ;

ident_ca : IDENT ASSIGN expr                                          { $$ = new Syntax::PartialVariableDeclarationNode($1, true, false, -1, $3); }
         | IDENT LBRACKET INTCONST RBRACKET ASSIGN expr               { $$ = new Syntax::PartialVariableDeclarationNode($1, true, true, $3, $6); }
         | IDENT                                                      { $$ = new Syntax::PartialVariableDeclarationNode($1); }
         | IDENT LBRACKET INTCONST RBRACKET                           { $$ = new Syntax::PartialVariableDeclarationNode($1, false, true, $3); }
         ;

%%

void yy::parser::error(const location &loc , const std::string &message) {
        
        // Location should be initialized inside scanner action, but is not in this example.
        // Let's grab location directly from driver class.
	// cout << "Error: " << message << endl << "Location: " << loc << endl;
        std::cerr << "Error near " << *(loc.begin.filename) //driver.location().begin.filename 
                  << " line " << loc.begin.line //driver.location().begin.line 
                  << " text '" << "yytext" << "'\n\t" << message << std::endl;	
        //std::cout << "Error: " << message << std::endl << "Error location: " << driver.location() << std::endl;
}

void set_driver_translation_unit(Syntax::TranslationUnitNode* node) {}

// void print_formal_param_list(std::vector<Symbol::ParameterSymbol> list) {
//         std::vector<Symbol::ParameterSymbol>::iterator iter;
//     for( iter = list.begin(); iter != list.end(); iter++) {
//         Syntax::ParameterSymbol p = *iter;
//         std::cout << (p.constant() ? "const " : "") << p.var_type() << " " << p.var_name() << " " << (p.array() ? "[]" : "") << std::endl;
//     }
// }